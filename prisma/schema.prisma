// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String            @id
  username              String            @unique
  avatar                String?
  cover                 String?
  name                  String?
  surname               String?
  description           String?
  city                  String?
  work                  String?
  school                String?
  website               String?
  createdAt             DateTime          @default(now())
  post                  Post[]
  comment               Comment[]
  likes                 Like[]
  followers             Follower[]        @relation("UserFollowers")
  followings            Follower[]        @relation("UserFollowings")
  followRequestSent     FollowRequest[]   @relation("FollowRequestsSent")
  followRequestReceived FollowRequest[]   @relation("FollowRequestsReceived")
  blocks                Block[]           @relation("BlocksSent")
  blockedBy             Block[]           @relation("BlocksReceived")
  stories               Story[]
  storyVisibility       StoryVisibility[]
  postVisibility        PostVisibility[]
  storyViews            StoryViews[]
}

model Post {
  id             Int              @id @default(autoincrement())
  desc           String
  img            String?
  visbility      String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  userId         String
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments       Comment[]
  likes          Like[]
  postVisibility PostVisibility[]
}

model PostVisibility {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model Comment {
  id        Int      @id @default(autoincrement())
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  likes     Like[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?
  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int?
}

model Follower {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowers", fields: [followerId], onDelete: Cascade, references: [id])
  followerId  String
  following   User     @relation("UserFollowings", fields: [followingId], onDelete: Cascade, references: [id])
  followingId String
}

model FollowRequest {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  sender     User     @relation("FollowRequestsSent", fields: [senderId], onDelete: Cascade, references: [id])
  senderId   String
  receiver   User     @relation("FollowRequestsReceived", fields: [receiverId], onDelete: Cascade, references: [id])
  receiverId String

  @@unique([senderId, receiverId])
}

model Block {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  blocker   User     @relation("BlocksSent", fields: [blockerId], onDelete: Cascade, references: [id])
  blockerId String
  blocked   User     @relation("BlocksReceived", fields: [blockedId], onDelete: Cascade, references: [id])
  blockedId String

  @@unique([blockerId, blockedId])
}

model Story {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  expiresAt       DateTime
  img             String
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  storyVisibility StoryVisibility[]
  storyViews      StoryViews[]
}

model StoryViews {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId   Int
  viewer    User     @relation(fields: [viewerId], references: [id], onDelete: Cascade)
  viewerId  String

  @@unique([storyId, viewerId])
  @@index([storyId])
  @@index([viewerId])
}

model StoryVisibility {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId   Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}
